{
  "version": 3,
  "sources": ["../../src/algorithms/encounter-evaluator.model.ts", "../../src/algorithms/encounter-evaluator.ts"],
  "sourcesContent": ["export interface Encounter {\n  party: number[];\n  opponents: number[];\n};\n\nconst DIFFICULTY = {\n  EASY: \"Easy\",\n  MEDIUM: \"Medium\",\n  HARD: \"Hard\",\n  DEADLY: \"Deadly\",\n} as const;\n\nexport type Difficulty = typeof DIFFICULTY[keyof typeof DIFFICULTY];\n\nexport type Level =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20;\n\nexport type XpThresholds = {\n  [key in Difficulty]: number;\n};\n\nexport type XPThresholdsByLevel = {\n  [key in Level]: XpThresholds;\n};\n\nexport const XP_THRESHOLDS_BY_LEVEL: XPThresholdsByLevel = {\n  1: { Easy: 25, Medium: 50, Hard: 75, Deadly: 100 },\n  2: { Easy: 50, Medium: 100, Hard: 150, Deadly: 200 },\n  3: { Easy: 75, Medium: 150, Hard: 225, Deadly: 400 },\n  4: { Easy: 125, Medium: 250, Hard: 375, Deadly: 500 },\n  5: { Easy: 250, Medium: 500, Hard: 750, Deadly: 1_100 },\n  6: { Easy: 300, Medium: 600, Hard: 900, Deadly: 1_400 },\n  7: { Easy: 350, Medium: 750, Hard: 1_100, Deadly: 1_700 },\n  8: { Easy: 450, Medium: 900, Hard: 1_400, Deadly: 2_100 },\n  9: { Easy: 550, Medium: 1_100, Hard: 1_600, Deadly: 2_400 },\n  10: { Easy: 600, Medium: 1_200, Hard: 1_900, Deadly: 2_800 },\n  11: { Easy: 800, Medium: 1_600, Hard: 2_400, Deadly: 3_600 },\n  12: { Easy: 1_000, Medium: 2_000, Hard: 3_000, Deadly: 4_500 },\n  13: { Easy: 1_100, Medium: 2_200, Hard: 3_400, Deadly: 5_100 },\n  14: { Easy: 1_250, Medium: 2_500, Hard: 3_800, Deadly: 5_700 },\n  15: { Easy: 1_400, Medium: 2_800, Hard: 4_300, Deadly: 6_400 },\n  16: { Easy: 1_600, Medium: 3_200, Hard: 4_800, Deadly: 7_200 },\n  17: { Easy: 2_000, Medium: 3_900, Hard: 5_900, Deadly: 8_800 },\n  18: { Easy: 2_100, Medium: 4_200, Hard: 6_300, Deadly: 9_500 },\n  19: { Easy: 2_400, Medium: 4_900, Hard: 7_300, Deadly: 10_900 },\n  20: { Easy: 2_800, Medium: 5_700, Hard: 8_500, Deadly: 12_700 },\n} as const;\n\nexport interface EncounterMultiplier {\n  numberOfMonsters: number;\n  fewerThanThree: number;\n  threeToFive: number;\n  sixOrMore: number;\n};\n\nexport const ENCOUNTER_MULTIPLIERS: EncounterMultiplier[] = [\n  { numberOfMonsters: 1, fewerThanThree: 1.5, threeToFive: 1, sixOrMore: .5 },\n  { numberOfMonsters: 2, fewerThanThree: 2, threeToFive: 1.5, sixOrMore: 1 },\n  { numberOfMonsters: 3, fewerThanThree: 2.5, threeToFive: 2, sixOrMore: 1.5 },\n  { numberOfMonsters: 7, fewerThanThree: 3.5, threeToFive: 2.5, sixOrMore: 2 },\n  { numberOfMonsters: 11, fewerThanThree: 4.5, threeToFive: 3, sixOrMore: 2.5 },\n  { numberOfMonsters: 15, fewerThanThree: 5.5, threeToFive: 3.5, sixOrMore: 3 },\n] as const;\n\nexport interface Evaluation {\n  party: number[];\n  opponents: number[];\n  actualXp: number;\n  adjustedXp: number;\n  partyXpThresholds: XpThresholds;\n  multiplier: EncounterMultiplier;\n  difficulty: Difficulty;\n}\n", "import {\n  Difficulty,\n  Encounter,\n  ENCOUNTER_MULTIPLIERS,\n  EncounterMultiplier,\n  Evaluation,\n  Level,\n  XP_THRESHOLDS_BY_LEVEL,\n  XpThresholds,\n} from \"./encounter-evaluator.model.ts\";\n\nexport class EncounterEvaluator implements Encounter, Evaluation {\n  party: number[];\n  opponents: number[];\n  actualXp: number;\n  adjustedXp: number;\n  partyXpThresholds: XpThresholds;\n  multiplier: EncounterMultiplier;\n  difficulty: Difficulty;\n\n  constructor(encounter: Encounter) {\n    this.party = encounter.party;\n    this.opponents = encounter.opponents;\n    this.actualXp = this.getActualXP();\n    this.partyXpThresholds = this.getPartyXPThresholds();\n    this.multiplier = this.getMultiplier();\n    this.adjustedXp = this.getAdjustedXP();\n    this.difficulty = this.getDifficulty();\n  }\n\n  private getActualXP(): number {\n    return this.opponents.reduce((acc, level) => acc + level, 0);\n  }\n\n  private getCharacterXPThresholds(level: Level): XpThresholds {\n    return XP_THRESHOLDS_BY_LEVEL[level];\n  }\n\n  private getPartyXPThresholds(): XpThresholds {\n    const initialThresholds: XpThresholds = {\n      Easy: 0,\n      Medium: 0,\n      Hard: 0,\n      Deadly: 0,\n    };\n\n    const party = this.party.map((level) =>\n      this.getCharacterXPThresholds(level as Level)\n    );\n\n    return party.reduce((acc, level) => {\n      Object.keys(level).forEach((key) => {\n        acc[key as Difficulty] += level[key as Difficulty];\n      });\n\n      return acc;\n    }, initialThresholds);\n  }\n\n  private getMultiplier(): EncounterMultiplier {\n    const numberOfOpponents = this.opponents.length;\n\n    if (numberOfOpponents >= 15) {\n      return ENCOUNTER_MULTIPLIERS[5];\n    }\n\n    return ENCOUNTER_MULTIPLIERS.find((multiplier, index) => {\n      return numberOfOpponents >= multiplier.numberOfMonsters &&\n        numberOfOpponents < ENCOUNTER_MULTIPLIERS[index + 1].numberOfMonsters;\n    })!;\n  }\n\n  private getAdjustedXP(): number {\n    const partySize = this.party.length;\n\n    if (partySize < 3) {\n      return this.actualXp * this.multiplier.fewerThanThree;\n    }\n\n    if (partySize >= 3 && partySize <= 5) {\n      return this.actualXp * this.multiplier.threeToFive;\n    }\n\n    return this.actualXp * this.multiplier.sixOrMore;\n  }\n\n  private getDifficulty(): Difficulty {\n    if (this.adjustedXp >= this.partyXpThresholds.Deadly) {\n      return \"Deadly\";\n    } else if (this.adjustedXp >= this.partyXpThresholds.Hard) {\n      return \"Hard\";\n    } else if (this.adjustedXp >= this.partyXpThresholds.Medium) {\n      return \"Medium\";\n    } else {\n      return \"Easy\";\n    }\n  }\n\n  static evaluate(encounter: Encounter): Evaluation {\n    return new EncounterEvaluator(encounter);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
